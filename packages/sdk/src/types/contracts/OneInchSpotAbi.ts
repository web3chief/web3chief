/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ConnectorAdded = ContractEventLog<{
  connector: string;
  0: string;
}>;
export type ConnectorRemoved = ContractEventLog<{
  connector: string;
  0: string;
}>;
export type MultiWrapperUpdated = ContractEventLog<{
  multiWrapper: string;
  0: string;
}>;
export type OracleAdded = ContractEventLog<{
  oracle: string;
  oracleType: string;
  0: string;
  1: string;
}>;
export type OracleRemoved = ContractEventLog<{
  oracle: string;
  oracleType: string;
  0: string;
  1: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface OneInchSpotAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): OneInchSpotAbi;
  clone(): OneInchSpotAbi;
  methods: {
    addConnector(connector: string): NonPayableTransactionObject<void>;

    addOracle(
      oracle: string,
      oracleKind: number | string | BN
    ): NonPayableTransactionObject<void>;

    connectors(): NonPayableTransactionObject<string[]>;

    getRate(
      srcToken: string,
      dstToken: string,
      useWrappers: boolean
    ): NonPayableTransactionObject<string>;

    getRateToEth(
      srcToken: string,
      useSrcWrappers: boolean
    ): NonPayableTransactionObject<string>;

    multiWrapper(): NonPayableTransactionObject<string>;

    oracles(): NonPayableTransactionObject<{
      allOracles: string[];
      oracleTypes: string[];
      0: string[];
      1: string[];
    }>;

    owner(): NonPayableTransactionObject<string>;

    removeConnector(connector: string): NonPayableTransactionObject<void>;

    removeOracle(
      oracle: string,
      oracleKind: number | string | BN
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setMultiWrapper(_multiWrapper: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    ConnectorAdded(cb?: Callback<ConnectorAdded>): EventEmitter;
    ConnectorAdded(
      options?: EventOptions,
      cb?: Callback<ConnectorAdded>
    ): EventEmitter;

    ConnectorRemoved(cb?: Callback<ConnectorRemoved>): EventEmitter;
    ConnectorRemoved(
      options?: EventOptions,
      cb?: Callback<ConnectorRemoved>
    ): EventEmitter;

    MultiWrapperUpdated(cb?: Callback<MultiWrapperUpdated>): EventEmitter;
    MultiWrapperUpdated(
      options?: EventOptions,
      cb?: Callback<MultiWrapperUpdated>
    ): EventEmitter;

    OracleAdded(cb?: Callback<OracleAdded>): EventEmitter;
    OracleAdded(
      options?: EventOptions,
      cb?: Callback<OracleAdded>
    ): EventEmitter;

    OracleRemoved(cb?: Callback<OracleRemoved>): EventEmitter;
    OracleRemoved(
      options?: EventOptions,
      cb?: Callback<OracleRemoved>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ConnectorAdded", cb: Callback<ConnectorAdded>): void;
  once(
    event: "ConnectorAdded",
    options: EventOptions,
    cb: Callback<ConnectorAdded>
  ): void;

  once(event: "ConnectorRemoved", cb: Callback<ConnectorRemoved>): void;
  once(
    event: "ConnectorRemoved",
    options: EventOptions,
    cb: Callback<ConnectorRemoved>
  ): void;

  once(event: "MultiWrapperUpdated", cb: Callback<MultiWrapperUpdated>): void;
  once(
    event: "MultiWrapperUpdated",
    options: EventOptions,
    cb: Callback<MultiWrapperUpdated>
  ): void;

  once(event: "OracleAdded", cb: Callback<OracleAdded>): void;
  once(
    event: "OracleAdded",
    options: EventOptions,
    cb: Callback<OracleAdded>
  ): void;

  once(event: "OracleRemoved", cb: Callback<OracleRemoved>): void;
  once(
    event: "OracleRemoved",
    options: EventOptions,
    cb: Callback<OracleRemoved>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
