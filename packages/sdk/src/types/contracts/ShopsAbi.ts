/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BuyToken = ContractEventLog<{
  sender: string;
  shopId: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type CreateShop = ContractEventLog<{
  sender: string;
  shopId: string;
  shop: [
    string,
    [string, string, string],
    string,
    [string, string, string],
    string,
    string
  ];
  timestamp: string;
  0: string;
  1: string;
  2: [
    string,
    [string, string, string],
    string,
    [string, string, string],
    string,
    string
  ];
  3: string;
}>;
export type EditShop = ContractEventLog<{
  sender: string;
  shopId: string;
  shop: [
    string,
    [string, string, string],
    string,
    [string, string, string],
    string,
    string
  ];
  timestamp: string;
  0: string;
  1: string;
  2: [
    string,
    [string, string, string],
    string,
    [string, string, string],
    string,
    string
  ];
  3: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type WithdrawToken = ContractEventLog<{
  sender: string;
  standart: string;
  token: [string, string, string];
  timestamp: string;
  0: string;
  1: string;
  2: [string, string, string];
  3: string;
}>;

export interface ShopsAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ShopsAbi;
  clone(): ShopsAbi;
  methods: {
    buyToken(shopId: number | string | BN): NonPayableTransactionObject<void>;

    buyTokenBatch(
      shopIds: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    createShop(
      newShop: [
        number | string | BN,
        [string, number | string | BN, number | string | BN],
        number | string | BN,
        [string, number | string | BN, number | string | BN],
        number | string | BN,
        string
      ]
    ): NonPayableTransactionObject<string>;

    editShop(
      shopId: number | string | BN,
      shop: [
        number | string | BN,
        [string, number | string | BN, number | string | BN],
        number | string | BN,
        [string, number | string | BN, number | string | BN],
        number | string | BN,
        string
      ]
    ): NonPayableTransactionObject<void>;

    gameFiCore(): NonPayableTransactionObject<string>;

    initialize(gameFiCore_: string): NonPayableTransactionObject<void>;

    isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    setTrustedForwarder(
      newTrustedForwarder: string
    ): NonPayableTransactionObject<void>;

    shopDetails(
      shopId: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        [string, string, string],
        string,
        [string, string, string],
        string,
        string
      ]
    >;

    shopOfTagByIndex(
      tag: string,
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    totalShops(): NonPayableTransactionObject<string>;

    totalShopsOfTag(tag: string): NonPayableTransactionObject<string>;

    trustedForwarder(): NonPayableTransactionObject<string>;

    versionRecipient(): NonPayableTransactionObject<string>;

    withdrawToken(
      standart: number | string | BN,
      token: [string, number | string | BN, number | string | BN]
    ): NonPayableTransactionObject<void>;
  };
  events: {
    BuyToken(cb?: Callback<BuyToken>): EventEmitter;
    BuyToken(options?: EventOptions, cb?: Callback<BuyToken>): EventEmitter;

    CreateShop(cb?: Callback<CreateShop>): EventEmitter;
    CreateShop(options?: EventOptions, cb?: Callback<CreateShop>): EventEmitter;

    EditShop(cb?: Callback<EditShop>): EventEmitter;
    EditShop(options?: EventOptions, cb?: Callback<EditShop>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    WithdrawToken(cb?: Callback<WithdrawToken>): EventEmitter;
    WithdrawToken(
      options?: EventOptions,
      cb?: Callback<WithdrawToken>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BuyToken", cb: Callback<BuyToken>): void;
  once(event: "BuyToken", options: EventOptions, cb: Callback<BuyToken>): void;

  once(event: "CreateShop", cb: Callback<CreateShop>): void;
  once(
    event: "CreateShop",
    options: EventOptions,
    cb: Callback<CreateShop>
  ): void;

  once(event: "EditShop", cb: Callback<EditShop>): void;
  once(event: "EditShop", options: EventOptions, cb: Callback<EditShop>): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "WithdrawToken", cb: Callback<WithdrawToken>): void;
  once(
    event: "WithdrawToken",
    options: EventOptions,
    cb: Callback<WithdrawToken>
  ): void;
}
