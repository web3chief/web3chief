/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;

export interface RouterAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RouterAbi;
  clone(): RouterAbi;
  methods: {
    _avatarPropertyId(): NonPayableTransactionObject<string>;

    _usernamePropertyId(): NonPayableTransactionObject<string>;

    createProfile(
      avatarShopId: number | string | BN,
      username: string | number[]
    ): NonPayableTransactionObject<string>;

    gameFiCore(): NonPayableTransactionObject<string>;

    gameFiMarketpalce(): NonPayableTransactionObject<string>;

    gameFiShops(): NonPayableTransactionObject<string>;

    initialize(
      gameFiCore_: string,
      gameFiShops_: string,
      gameFiMarketplace: string,
      avatarPropertyId_: number | string | BN,
      usernamePropertyId_: number | string | BN
    ): NonPayableTransactionObject<void>;

    isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>;

    name(): NonPayableTransactionObject<string>;

    setTrustedForwarder(
      newTrustedForwarder: string
    ): NonPayableTransactionObject<void>;

    trustedForwarder(): NonPayableTransactionObject<string>;

    versionRecipient(): NonPayableTransactionObject<string>;
  };
  events: {
    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;
}
