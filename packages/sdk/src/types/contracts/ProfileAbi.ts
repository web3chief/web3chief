/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Call = ContractEventLog<{
  owner: string;
  target: string;
  data: string;
  value: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type MultiCall = ContractEventLog<{
  owner: string;
  target: string[];
  data: string[];
  value: string[];
  timestamp: string;
  0: string;
  1: string[];
  2: string[];
  3: string[];
  4: string;
}>;

export interface ProfileAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ProfileAbi;
  clone(): ProfileAbi;
  methods: {
    call(
      target: string,
      data: string | number[],
      value: number | string | BN
    ): NonPayableTransactionObject<string>;

    gameFiCore(): NonPayableTransactionObject<string>;

    initialize(gameFiCore: string): NonPayableTransactionObject<void>;

    isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>;

    multiCall(
      target: string[],
      data: (string | number[])[],
      value: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    trustedForwarder(): NonPayableTransactionObject<string>;

    versionRecipient(): NonPayableTransactionObject<string>;
  };
  events: {
    Call(cb?: Callback<Call>): EventEmitter;
    Call(options?: EventOptions, cb?: Callback<Call>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    MultiCall(cb?: Callback<MultiCall>): EventEmitter;
    MultiCall(options?: EventOptions, cb?: Callback<MultiCall>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Call", cb: Callback<Call>): void;
  once(event: "Call", options: EventOptions, cb: Callback<Call>): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "MultiCall", cb: Callback<MultiCall>): void;
  once(
    event: "MultiCall",
    options: EventOptions,
    cb: Callback<MultiCall>
  ): void;
}
