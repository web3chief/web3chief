/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AddSettlementToken = ContractEventLog<{
  sender: string;
  erc20: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type AddToWhitelistErc1155 = ContractEventLog<{
  sender: string;
  erc1155: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type AddToWhitelistErc721 = ContractEventLog<{
  sender: string;
  erc721: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type CancelOrder = ContractEventLog<{
  sender: string;
  orderId: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type CreateOrder = ContractEventLog<{
  sender: string;
  orderId: string;
  nftStandart: string;
  tokenContract: string;
  tokenId: string;
  tokenAmount: string;
  mainSettlementToken: string;
  otherSettlementTokens: string[];
  orderPrice: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string[];
  8: string;
  9: string;
}>;
export type ExecuteOrder = ContractEventLog<{
  sender: string;
  orderId: string;
  fee: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type RemoveFromWhitelistErc1155 = ContractEventLog<{
  sender: string;
  erc1155: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type RemoveFromWhitelistErc721 = ContractEventLog<{
  sender: string;
  erc721: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type RemoveSettlementToken = ContractEventLog<{
  sender: string;
  erc20: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetTradeFeePercentage = ContractEventLog<{
  sender: string;
  newTradeFeePercentage: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type WithdrawERC20 = ContractEventLog<{
  sender: string;
  tokenContract: string;
  amount: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface MarketplaceAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MarketplaceAbi;
  clone(): MarketplaceAbi;
  methods: {
    addSettlementToken(erc20: string): NonPayableTransactionObject<void>;

    addToWhitelistErc1155(erc1155: string): NonPayableTransactionObject<void>;

    addToWhitelistErc721(erc721: string): NonPayableTransactionObject<void>;

    cancelOrder(
      orderId: number | string | BN
    ): NonPayableTransactionObject<void>;

    containsSettlementToken(
      erc20: string
    ): NonPayableTransactionObject<boolean>;

    containsWhitelistErc1155(
      erc1155: string
    ): NonPayableTransactionObject<boolean>;

    containsWhitelistErc721(
      erc721: string
    ): NonPayableTransactionObject<boolean>;

    createOrder(
      nftStandart: number | string | BN,
      tokenContract: string,
      tokenId: number | string | BN,
      tokenAmount: number | string | BN,
      mainSettlementToken: string,
      otherSettlementTokens: string[],
      orderPrice: number | string | BN
    ): NonPayableTransactionObject<string>;

    executeOrder(
      orderId: number | string | BN
    ): NonPayableTransactionObject<void>;

    "fetchOrdersBy(uint8,uint256,uint256)"(
      byStatus: number | string | BN,
      cursor: number | string | BN,
      howMany: number | string | BN
    ): NonPayableTransactionObject<{
      orderIds: string[];
      newCursor: string;
      0: string[];
      1: string;
    }>;

    "fetchOrdersBy(address,uint8,uint256,uint256)"(
      byUser: string,
      byStatus: number | string | BN,
      cursor: number | string | BN,
      howMany: number | string | BN
    ): NonPayableTransactionObject<{
      orderIds: string[];
      newCursor: string;
      0: string[];
      1: string;
    }>;

    getSettlementTokens(): NonPayableTransactionObject<string[]>;

    getWhitelistErc1155(): NonPayableTransactionObject<string[]>;

    getWhitelistErc721(): NonPayableTransactionObject<string[]>;

    initialize(gameFiCore: string): NonPayableTransactionObject<void>;

    isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    orderDetails(
      orderId: number | string | BN
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string[],
        string,
        string,
        string,
        string
      ]
    >;

    orderDetailsBatch(
      orderIds: (number | string | BN)[]
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string[],
        string,
        string,
        string,
        string
      ][]
    >;

    removeFromWhitelistErc1155(
      erc1155: string
    ): NonPayableTransactionObject<void>;

    removeFromWhitelistErc721(
      erc721: string
    ): NonPayableTransactionObject<void>;

    removeSettlementToken(erc20: string): NonPayableTransactionObject<void>;

    setTradeFeePercentage(
      newTradeFeePercentage: number | string | BN
    ): NonPayableTransactionObject<void>;

    setTrustedForwarder(
      newTrustedForwarder: string
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    totalOrders(): NonPayableTransactionObject<string>;

    totalOrdersBy(
      byStatus: number | string | BN
    ): NonPayableTransactionObject<string>;

    tradeFeePercentage(): NonPayableTransactionObject<string>;

    trustedForwarder(): NonPayableTransactionObject<string>;

    versionRecipient(): NonPayableTransactionObject<string>;

    withdrawERC20(
      erc20: string,
      amount: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AddSettlementToken(cb?: Callback<AddSettlementToken>): EventEmitter;
    AddSettlementToken(
      options?: EventOptions,
      cb?: Callback<AddSettlementToken>
    ): EventEmitter;

    AddToWhitelistErc1155(cb?: Callback<AddToWhitelistErc1155>): EventEmitter;
    AddToWhitelistErc1155(
      options?: EventOptions,
      cb?: Callback<AddToWhitelistErc1155>
    ): EventEmitter;

    AddToWhitelistErc721(cb?: Callback<AddToWhitelistErc721>): EventEmitter;
    AddToWhitelistErc721(
      options?: EventOptions,
      cb?: Callback<AddToWhitelistErc721>
    ): EventEmitter;

    CancelOrder(cb?: Callback<CancelOrder>): EventEmitter;
    CancelOrder(
      options?: EventOptions,
      cb?: Callback<CancelOrder>
    ): EventEmitter;

    CreateOrder(cb?: Callback<CreateOrder>): EventEmitter;
    CreateOrder(
      options?: EventOptions,
      cb?: Callback<CreateOrder>
    ): EventEmitter;

    ExecuteOrder(cb?: Callback<ExecuteOrder>): EventEmitter;
    ExecuteOrder(
      options?: EventOptions,
      cb?: Callback<ExecuteOrder>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    RemoveFromWhitelistErc1155(
      cb?: Callback<RemoveFromWhitelistErc1155>
    ): EventEmitter;
    RemoveFromWhitelistErc1155(
      options?: EventOptions,
      cb?: Callback<RemoveFromWhitelistErc1155>
    ): EventEmitter;

    RemoveFromWhitelistErc721(
      cb?: Callback<RemoveFromWhitelistErc721>
    ): EventEmitter;
    RemoveFromWhitelistErc721(
      options?: EventOptions,
      cb?: Callback<RemoveFromWhitelistErc721>
    ): EventEmitter;

    RemoveSettlementToken(cb?: Callback<RemoveSettlementToken>): EventEmitter;
    RemoveSettlementToken(
      options?: EventOptions,
      cb?: Callback<RemoveSettlementToken>
    ): EventEmitter;

    SetTradeFeePercentage(cb?: Callback<SetTradeFeePercentage>): EventEmitter;
    SetTradeFeePercentage(
      options?: EventOptions,
      cb?: Callback<SetTradeFeePercentage>
    ): EventEmitter;

    WithdrawERC20(cb?: Callback<WithdrawERC20>): EventEmitter;
    WithdrawERC20(
      options?: EventOptions,
      cb?: Callback<WithdrawERC20>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AddSettlementToken", cb: Callback<AddSettlementToken>): void;
  once(
    event: "AddSettlementToken",
    options: EventOptions,
    cb: Callback<AddSettlementToken>
  ): void;

  once(
    event: "AddToWhitelistErc1155",
    cb: Callback<AddToWhitelistErc1155>
  ): void;
  once(
    event: "AddToWhitelistErc1155",
    options: EventOptions,
    cb: Callback<AddToWhitelistErc1155>
  ): void;

  once(event: "AddToWhitelistErc721", cb: Callback<AddToWhitelistErc721>): void;
  once(
    event: "AddToWhitelistErc721",
    options: EventOptions,
    cb: Callback<AddToWhitelistErc721>
  ): void;

  once(event: "CancelOrder", cb: Callback<CancelOrder>): void;
  once(
    event: "CancelOrder",
    options: EventOptions,
    cb: Callback<CancelOrder>
  ): void;

  once(event: "CreateOrder", cb: Callback<CreateOrder>): void;
  once(
    event: "CreateOrder",
    options: EventOptions,
    cb: Callback<CreateOrder>
  ): void;

  once(event: "ExecuteOrder", cb: Callback<ExecuteOrder>): void;
  once(
    event: "ExecuteOrder",
    options: EventOptions,
    cb: Callback<ExecuteOrder>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(
    event: "RemoveFromWhitelistErc1155",
    cb: Callback<RemoveFromWhitelistErc1155>
  ): void;
  once(
    event: "RemoveFromWhitelistErc1155",
    options: EventOptions,
    cb: Callback<RemoveFromWhitelistErc1155>
  ): void;

  once(
    event: "RemoveFromWhitelistErc721",
    cb: Callback<RemoveFromWhitelistErc721>
  ): void;
  once(
    event: "RemoveFromWhitelistErc721",
    options: EventOptions,
    cb: Callback<RemoveFromWhitelistErc721>
  ): void;

  once(
    event: "RemoveSettlementToken",
    cb: Callback<RemoveSettlementToken>
  ): void;
  once(
    event: "RemoveSettlementToken",
    options: EventOptions,
    cb: Callback<RemoveSettlementToken>
  ): void;

  once(
    event: "SetTradeFeePercentage",
    cb: Callback<SetTradeFeePercentage>
  ): void;
  once(
    event: "SetTradeFeePercentage",
    options: EventOptions,
    cb: Callback<SetTradeFeePercentage>
  ): void;

  once(event: "WithdrawERC20", cb: Callback<WithdrawERC20>): void;
  once(
    event: "WithdrawERC20",
    options: EventOptions,
    cb: Callback<WithdrawERC20>
  ): void;
}
