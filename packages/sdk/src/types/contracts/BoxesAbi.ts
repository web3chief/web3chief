/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type ApprovalForAll = ContractEventLog<{
  account: string;
  operator: string;
  approved: boolean;
  0: string;
  1: string;
  2: boolean;
}>;
export type BoxReward = ContractEventLog<{
  target: string;
  token: string;
  tokenId: string;
  amount: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OpenBox = ContractEventLog<{
  owner: string;
  tokenId: string;
  amount: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SetHookContract = ContractEventLog<{
  owner: string;
  hookedContract: string;
  timestamp: string;
  0: string;
  1: string;
  2: string;
}>;
export type SetupRewardSet = ContractEventLog<{
  sender: string;
  tokenId: string;
  rewardSet: [string, string, string, string[], string[], string[]][];
  timestamp: string;
  0: string;
  1: string;
  2: [string, string, string, string[], string[], string[]][];
  3: string;
}>;
export type TransferBatch = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  ids: string[];
  values: string[];
  0: string;
  1: string;
  2: string;
  3: string[];
  4: string[];
}>;
export type TransferSingle = ContractEventLog<{
  operator: string;
  from: string;
  to: string;
  id: string;
  value: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type URI = ContractEventLog<{
  value: string;
  id: string;
  0: string;
  1: string;
}>;

export interface BoxesAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BoxesAbi;
  clone(): BoxesAbi;
  methods: {
    balanceOf(
      account: string,
      id: number | string | BN
    ): NonPayableTransactionObject<string>;

    balanceOfBatch(
      accounts: string[],
      ids: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    burn(
      account: string,
      id: number | string | BN,
      value: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    burnBatch(
      account: string,
      ids: (number | string | BN)[],
      values: (number | string | BN)[],
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    contractURI(): NonPayableTransactionObject<string>;

    exists(id: number | string | BN): NonPayableTransactionObject<boolean>;

    getBoxRewards(
      tokenId: number | string | BN
    ): NonPayableTransactionObject<
      [string, string, string, string[], string[], string[]][]
    >;

    initialize(
      name_: string,
      symbol_: string,
      contractURI_: string,
      tokenURI_: string,
      data_: string | number[]
    ): NonPayableTransactionObject<void>;

    isApprovedForAll(
      account: string,
      operator: string
    ): NonPayableTransactionObject<boolean>;

    mint(
      account: string,
      id: number | string | BN,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    mintBatch(
      to: string,
      ids: (number | string | BN)[],
      amounts: (number | string | BN)[],
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    name(): NonPayableTransactionObject<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    openBox(
      tokenId: number | string | BN,
      boxAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: (number | string | BN)[],
      amounts: (number | string | BN)[],
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: number | string | BN,
      amount: number | string | BN,
      data: string | number[]
    ): NonPayableTransactionObject<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean
    ): NonPayableTransactionObject<void>;

    setContractURI(newURI: string): NonPayableTransactionObject<void>;

    setHookContract(newHookContract: string): NonPayableTransactionObject<void>;

    setTokenURI(newURI: string): NonPayableTransactionObject<void>;

    setupRewardSet(
      tokenId: number | string | BN,
      rewardSet: [
        number | string | BN,
        string,
        number | string | BN,
        (number | string | BN)[],
        (number | string | BN)[],
        (number | string | BN)[]
      ][]
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    symbol(): NonPayableTransactionObject<string>;

    "totalSupply()"(): NonPayableTransactionObject<string>;

    "totalSupply(uint256)"(
      id: number | string | BN
    ): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    uri(arg0: number | string | BN): NonPayableTransactionObject<string>;
  };
  events: {
    ApprovalForAll(cb?: Callback<ApprovalForAll>): EventEmitter;
    ApprovalForAll(
      options?: EventOptions,
      cb?: Callback<ApprovalForAll>
    ): EventEmitter;

    BoxReward(cb?: Callback<BoxReward>): EventEmitter;
    BoxReward(options?: EventOptions, cb?: Callback<BoxReward>): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OpenBox(cb?: Callback<OpenBox>): EventEmitter;
    OpenBox(options?: EventOptions, cb?: Callback<OpenBox>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SetHookContract(cb?: Callback<SetHookContract>): EventEmitter;
    SetHookContract(
      options?: EventOptions,
      cb?: Callback<SetHookContract>
    ): EventEmitter;

    SetupRewardSet(cb?: Callback<SetupRewardSet>): EventEmitter;
    SetupRewardSet(
      options?: EventOptions,
      cb?: Callback<SetupRewardSet>
    ): EventEmitter;

    TransferBatch(cb?: Callback<TransferBatch>): EventEmitter;
    TransferBatch(
      options?: EventOptions,
      cb?: Callback<TransferBatch>
    ): EventEmitter;

    TransferSingle(cb?: Callback<TransferSingle>): EventEmitter;
    TransferSingle(
      options?: EventOptions,
      cb?: Callback<TransferSingle>
    ): EventEmitter;

    URI(cb?: Callback<URI>): EventEmitter;
    URI(options?: EventOptions, cb?: Callback<URI>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "ApprovalForAll", cb: Callback<ApprovalForAll>): void;
  once(
    event: "ApprovalForAll",
    options: EventOptions,
    cb: Callback<ApprovalForAll>
  ): void;

  once(event: "BoxReward", cb: Callback<BoxReward>): void;
  once(
    event: "BoxReward",
    options: EventOptions,
    cb: Callback<BoxReward>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OpenBox", cb: Callback<OpenBox>): void;
  once(event: "OpenBox", options: EventOptions, cb: Callback<OpenBox>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SetHookContract", cb: Callback<SetHookContract>): void;
  once(
    event: "SetHookContract",
    options: EventOptions,
    cb: Callback<SetHookContract>
  ): void;

  once(event: "SetupRewardSet", cb: Callback<SetupRewardSet>): void;
  once(
    event: "SetupRewardSet",
    options: EventOptions,
    cb: Callback<SetupRewardSet>
  ): void;

  once(event: "TransferBatch", cb: Callback<TransferBatch>): void;
  once(
    event: "TransferBatch",
    options: EventOptions,
    cb: Callback<TransferBatch>
  ): void;

  once(event: "TransferSingle", cb: Callback<TransferSingle>): void;
  once(
    event: "TransferSingle",
    options: EventOptions,
    cb: Callback<TransferSingle>
  ): void;

  once(event: "URI", cb: Callback<URI>): void;
  once(event: "URI", options: EventOptions, cb: Callback<URI>): void;
}
